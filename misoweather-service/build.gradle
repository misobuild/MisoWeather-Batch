buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
    repositories {
        mavenCentral()
    }

}

plugins {
    id 'org.springframework.boot' version '2.6.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"

    // test
    id 'jacoco'

    // kotlin
    id 'org.jetbrains.kotlin.jvm' version '1.6.21'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.6.21'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.6.21'

    // asciidoctor
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.misoweather'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2021.0.1")
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    // JWT Token
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'org.json:json:20210307'

    //Swagger
    implementation group: 'io.springfox', name: 'springfox-boot-starter', version: '3.0.0'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.springframework.security:spring-security-test'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'mysql:mysql-connector-java'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // JWT Token
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'org.json:json:20210307'
    implementation group: 'org.springframework.security.oauth', name: 'spring-security-oauth2', version: '2.3.5.RELEASE'

    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    implementation 'com.nimbusds:nimbus-jose-jwt:9.15.2'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'

    //querydsl 추가
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"

    //bus-amqp
//    implementation 'org.springframework.cloud:spring-cloud-starter-bus-amqp'

    // kotlin
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    testImplementation 'com.ninja-squad:springmockk:3.0.1'
    testImplementation 'io.kotest:kotest-runner-junit5:5.0.3'
    testImplementation 'io.kotest.extensions:kotest-extensions-spring:1.1.1'
    testImplementation 'io.kotest:kotest-assertions-core-jvm:5.0.3'

    // restdoc
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // kafka
    implementation 'org.springframework.kafka:spring-kafka'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

//querydsl 추가 시작
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}
//querydsl 추가 끝

test {
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
    }
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
    outputs.dir snippetsDir
}

jacoco {
    toolVersion = '0.8.5'
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled false
        csv.enabled false

        html.destination file("$buildDir/jacocoHtml")
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/misoweatherservice/*ServiceApplication.class",
                    "**/constants/*",
                    "**/Simple*.*",
                    "**/auth/*",
                    "**/domain/*",
                    "**/dto/*",
                    "**/api/Api**.*",
                    "**/api/ListDto.class",
                    "**/config/*",
                    "**/validator/*"
            ])
        }))
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            // 'element'가 없으면 프로젝트의 전체 파일을 합친 값을 기준으로 한다.
            limit {
                // 'counter'를 지정하지 않으면 default는 'INSTRUCTION'
                // 'value'를 지정하지 않으면 default는 'COVEREDRATIO'
                minimum = 0.10
            }
        }

        rule {
            enabled = false
            element = 'CLASS'

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.10
            }

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.10
            }

            // 커버리지 체크를 제외할 클래스들
            excludes = ["*.Q*"]
        }
    }
}
allOpen {
    annotation 'javax.persistence.Entity'
}

task testCoverage(type: Test) {
    group 'verification'
    description 'Runs the unit tests with coverage'

    dependsOn(':test',
            ':jacocoTestReport',
            ':jacocoTestCoverageVerification')

    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}

asciidoctor {
    dependsOn test
    inputs.dir snippetsDir
}

asciidoctor.doFirst {
    println("---------------- delete present asciidoctor.")
    delete file('src/main/resources/static/docs')
}

asciidoctor.doLast {  // 8
    println("---------------- asciidoctor is deleted!")
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}

bootJar {
    dependsOn asciidoctor
    copy {
        from "${asciidoctor.outputDir}"
        into 'BOOT-INF/classes/static/docs'
    }
}